
Q1. What is the purpose of Python's OOP?
Ans:- In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. 
      It aims to implement real-world entities like inheritance, polymorphisms, encapsulation.

Q2. Where does an inheritance search look for an attribute?
Ans:- An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from, 
      then in all higher superclasses, progressing from left to right (by default).

Q3. How do you distinguish between a class object and an instance object?
Ans:- Class is a blueprint or template from which objects are created. 
      Object is a real world entity such as pen, laptop, mobile, bed, keyboard, mouse, chair etc. Class is a group of similar objects.

Q4. What makes the first argument in a class’s method function special?
Ans:- The calling process is automatic while the receiving process is not (its explicit). This is the reason the first parameter of a function in class must be the object itself. 
      Writing this parameter as self is merely a convention. It is not a keyword and has no special meaning in Python.

Q5. What is the purpose of the init method?
Ans:- The __init__ method lets the class initialize the object's attributes and serves no other purpose.

Q6. What is the process for creating a class instance?
Ans:- The new operator requires a single, postfix argument: a call to a constructor. \
      The name of the constructor provides the name of the class to instantiate. The new operator returns a reference to the object it created.

Q7. What is the process for creating a class?
Ans:- Creating a new class creates a new type of object, allowing new instances of that type to be made. 
      Each class instance can have attributes attached to it for maintaining its state. 

Q8. How would you define the superclasses of a class?
Ans:- A superclass is the class from which many subclasses can be created. 

Q9. What is the relationship between classes and modules?
Ans:- Modules are collections of methods and constants. 
      They cannot generate instances. Classes may generate instances (objects), and have per-instance state (instance variables).

Q10. How do you make instances and classes?
Ans:- To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q11. Where and how should be class attributes created?
Ans:- Class attributes are the variables defined directly in the class that are shared by all objects of the class. 
      Instance attributes are attributes or properties attached to an instance of a class. Instance attributes are defined in the constructor.

Q12. Where and how are instance attributes created?
Ans:- Instance attributes are attributes or properties attached to an instance of a class. Instance attributes are defined in the constructor.

Q13. What does the term "self" in a Python class mean?
Ans:- The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?
Ans:- The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the "+" operator for adding two integers as well as joining two strings or merging two lists. 
      We can achieve this as the "+" operator is overloaded by the "int" class and "str" class.

Q15. When do you consider allowing operator overloading of your classes?
Ans:- Tt allows us to provide an intuitive interface to our class users, plus makes it possible for templates to work equally well with classes and built-in types.

Q16. What is the most popular form of operator overloading?
Ans:- A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. 
      It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Ans:- Both inheritance and polymorphism are fundamental concepts of object oriented programming. T
      These concepts help us to create code that can be extended and easily maintainable.

Q18. Describe three applications for exception processing.
Ans:- There are three types of exception—the checked exception, the error and the runtime exception.

Q19. What happens if you don't do something extra to treat an exception?
Ans:- When an exception occurred, if you don't handle it, the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?
Ans:- You can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause. 
      The code in the else-block executes if the code in the try: block does not raise an exception.

Q21. Describe two methods for triggering exceptions in your script.
Ans:-To avoid such a scenario, there are two methods to handle Python exceptions: Try – This method catches the exceptions raised by the program. Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of whether or not an exception exists.
Ans:-We handle this situation by applying the try-except block.  

Q23. What is the purpose of the try statement?
Ans:- The try statement allows you to define a block of code to be tested for errors while it is being executed. 

Q24. What are the two most popular try statement variations?
Ans:- The Different Try/Except Variations. So far we've used a try / except and even a try / except / except , but this is only two-thirds of the story. 
      There are two other optional segments to a try block: else and finally.
      
Q25. What is the purpose of the raise statement?
Ans:- The RAISE statement stops normal execution of a block or subprogram and transfers control to an exception handler.

Q26. What does the assert statement do, and what other statement is it like?
Ans:- The assert keyword is used when debugging code. 
      The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?
Ans:- The with statement is a replacement for commonly used try/finally error-handling statements.

Q28. What are *args, **kwargs?
Ans:- *args and **kwargs allow you to pass multiple arguments or keyword arguments to a function

Q29. How can I pass optional or keyword parameters from one function to another?
Ans:- Users can either pass their values or can pretend the function to use theirs default values which are specified.
      In this way, the user can call the function by either passing those optional parameters or just passing the required parameters.
      Without using keyword arguments. By using keyword arguments

Q30. What are Lambda Functions?
Ans:-  A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but, 
       unlike normal functions, evaluates and returns only one expression.

Q31. Explain Inheritance in Python with an example?
Ans:- Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes.

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Ans:- Multiple inheritance, two or more subclasses are derived from the superclass as shown in the above piece of code.

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Ans:- isinstance() and issubclass()

Q34.Explain the use of the 'nonlocal' keyword in Python.
Ans:- The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. 

Q35. What is the global keyword?
Ans:- The global keyword is used to create global variables from a no-global scope, e.g. inside a function.
